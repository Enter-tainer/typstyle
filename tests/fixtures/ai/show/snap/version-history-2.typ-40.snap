---
source: tests/src/unit.rs
input_file: tests/fixtures/ai/show/version-history-2.typ
---
#let version-data = (
  ("v0.13.1", "Mar 7", "8ace67d"),
  ("v0.13.0", "Feb 19", "8dce676"),
  ("v0.13.0-rc1", "Feb 5", "56d8188"),
  (
    "v0.12.0",
    "Oct 18, 2024",
    "737895d",
  ),
  (
    "v0.12.0-rc2",
    "Oct 15, 2024",
    "ef309ca",
  ),
  (
    "v0.12.0-rc1",
    "Oct 4, 2024",
    "d5b1f4a",
  ),
  (
    "v0.11.1",
    "May 17, 2024",
    "5011510",
  ),
  (
    "v0.11.0",
    "Mar 15, 2024",
    "2bf9f95",
  ),
  (
    "v0.11.0-rc1",
    "Mar 10, 2024",
    "fe94bd8",
  ),
  ("v0.10.0", "Dec 4, 2023", "70ca0d2"),
  ("v0.9.0", "Oct 31, 2023", "7bb4f6d"),
  ("v0.8.0", "Sep 13, 2023", "360cc9b"),
  ("v0.7.0", "Aug 7, 2023", "da8367e"),
  ("v0.6.0", "Jun 30, 2023", "2dfd44f"),
  ("v0.5.0", "Jun 9, 2023", "3a8b9cc"),
  ("v0.4.0", "May 21, 2023", "f692a5e"),
  ("v0.3.0", "Apr 26, 2023", "b1e0de0"),
  ("v0.2.0", "Apr 12, 2023", "fe2640c"),
  ("v0.1.0", "Apr 5, 2023", "b3faef4"),
)

#set page(paper: "a4", margin: 2cm)
#set text(font: "Inter", size: 11pt)

#let parse-date(date-str) = {
  // Simple date parsing - returns approximate days since start
  let months = (
    "Jan": 0,
    "Feb": 31,
    "Mar": 59,
    "Apr": 90,
    "May": 120,
    "Jun": 151,
    "Jul": 181,
    "Aug": 212,
    "Sep": 243,
    "Oct": 273,
    "Nov": 304,
    "Dec": 334,
  )

  let parts = date-str.split(" ")
  let month = parts.at(0)
  let day = int(parts
    .at(1)
    .replace(",", ""))
  let year = if parts.len() > 2 {
    int(parts.at(2))
  } else {
    2025
  } // Default to 2025 for recent dates

  let base-year = 2023
  let year-offset = (
    (year - base-year) * 365
  )

  (
    year-offset
      + months.at(month, default: 0)
      + day
  )
}

#let get-version-type(version) = {
  if version.contains("rc") {
    "rc"
  } else if (
    version.match(regex(
      "v\d+\.\d+\.0$",
    ))
      != none
  ) {
    "minor"
  } else {
    "patch"
  }
}

#let version-colors = (
  minor: rgb("#2563eb"),
  patch: rgb("#059669"),
  rc: rgb("#dc2626"),
)

#let format-duration(days) = {
  if days < 7 {
    str(days) + " days"
  } else if days < 30 {
    (
      str(calc.round(days / 7))
        + " weeks"
    )
  } else if days < 365 {
    (
      str(calc.round(
        days / 30.4,
        digits: 1,
      ))
        + " months"
    )
  } else {
    (
      str(calc.round(
        days / 365,
        digits: 1,
      ))
        + " years"
    )
  }
}

#align(center)[
  #text(
    size: 24pt,
    weight: "bold",
    fill: rgb("#1f2937"),
  )[
    Typst Version Timeline
  ]
  #v(0.3cm)
  #text(size: 12pt, fill: rgb(
    "#6b7280",
  ))[
    Release History with Time Gaps
  ]
]

#v(1cm)

// Parse all dates
#let parsed-dates = version-data.map(item => parse-date(
  item.at(1),
))

// Calculate time differences
#let time-diffs = ()
#for i in range(
  version-data.len() - 1,
) {
  let diff = (
    parsed-dates.at(i)
      - parsed-dates.at(i + 1)
  )
  time-diffs.push(diff)
}

// Legend
#grid(
  columns: 4,
  column-gutter: 1.5cm,
  [#text(
      fill: version-colors.minor,
      weight: "bold",
    )[üöÄ Major/Minor]],
  [#text(
      fill: version-colors.patch,
      weight: "bold",
    )[üîß Patch]],
  [#text(
      fill: version-colors.rc,
      weight: "bold",
    )[üß™ RC]],
  [#text(
      fill: rgb("#9ca3af"),
      weight: "bold",
    )[‚è±Ô∏è Time Gap]],
)

#v(1cm)
#line(
  length: 100%,
  stroke: 1pt + rgb("#e5e7eb"),
)
#v(0.5cm)

// Timeline with proportional spacing
#for (
  i,
  (version, date, commit),
) in version-data.enumerate() {
  let version-type = get-version-type(
    version,
  )
  let color = version-colors.at(
    version-type,
  )

  // Version entry
  grid(
    columns: (auto, 1fr, auto),
    column-gutter: 1cm,
    align: (left, left, right),

    [
      #circle(
        radius: 6pt,
        fill: color,
        stroke: 3pt + white,
      )
    ],

    [
      #text(
        size: 14pt,
        weight: "bold",
        fill: rgb("#1f2937"),
      )[#version]
      #linebreak()
      #text(size: 10pt, fill: rgb(
        "#6b7280",
      ))[#date]
      #if version-type == "rc" [
        #text(
          size: 9pt,
          fill: color,
          style: "italic",
        )[ (Release Candidate)]
      ]
    ],

    [
      #box(fill: rgb("#f9fafb"), radius: 3pt, inset: (x: 6pt, y: 3pt), stroke: 1pt + rgb("#e5e7eb")) [
      #text(
        size: 9pt,
        font: "JetBrains Mono",
      )[#commit]
      ]
    ],
  )

  // Time gap visualization
  if i < time-diffs.len() {
    let days = time-diffs.at(i)
    let scaled-spacing = calc.max(
      0.3,
      calc.min(2.0, days / 30),
    ) // Scale between 0.3cm and 2cm

    v(0.2cm)

    // Visual gap with duration
    pad(left: 1.5cm)[
      #stack(
        dir: ltr,
        spacing: 0.5cm,

        // Vertical line with variable height
        line(
          angle: 90deg,
          length: scaled-spacing * 1cm,
          stroke: (
            paint: if days <= 7 {
              rgb("#10b981")
            } else if days <= 30 {
              rgb("#f59e0b")
            } else { rgb("#ef4444") },
            thickness: 3pt,
            dash: if days <= 7 {
              none
            } else if days <= 30 {
              "dashed"
            } else { "dotted" },
          ),
        ),

        // Duration label
        box(
          fill: if days <= 7 {
            rgb("#ecfdf5")
          } else if days <= 30 {
            rgb("#fffbeb")
          } else { rgb("#fef2f2") },
          radius: 3pt,
          inset: (x: 6pt, y: 2pt),
          stroke: 1pt
            + if days <= 7 {
              rgb("#10b981")
            } else if days <= 30 {
              rgb("#f59e0b")
            } else { rgb("#ef4444") },
        )[
          #text(size: 8pt, fill: if days
            <= 7 {
            rgb("#065f46")
          } else if days <= 30 {
            rgb("#92400e")
          } else { rgb("#991b1b") })[
            ‚è±Ô∏è #format-duration(days)
          ]
        ],
      )
    ]

    v(scaled-spacing * 0.5cm)
  }
}

#v(1cm)
#line(
  length: 100%,
  stroke: 1pt + rgb("#e5e7eb"),
)

#grid(
  columns: 3,
  column-gutter: 2cm,
  [
    #text(
      size: 9pt,
      fill: rgb("#065f46"),
      weight: "bold",
    )[
      ‚ñ† Quick Release (‚â§1 week)
    ]
  ],
  [
    #text(
      size: 9pt,
      fill: rgb("#92400e"),
      weight: "bold",
    )[
      ‚ñ† Regular Release (1 week - 1 month)
    ]
  ],
  [
    #text(
      size: 9pt,
      fill: rgb("#991b1b"),
      weight: "bold",
    )[
      ‚ñ† Long Gap (>1 month)
    ]
  ],
)

#align(center)[
  #v(0.5cm)
  #text(
    size: 10pt,
    fill: rgb("#6b7280"),
    style: "italic",
  )[
    Visual spacing represents actual time between releases
  ]
]
